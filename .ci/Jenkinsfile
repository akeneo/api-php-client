#!groovy

import org.csanchez.jenkins.plugins.kubernetes.pipeline.PodTemplateAction

String launchUnitTests = "yes"
String launchIntegrationTests = "yes"
String[] pimVersions = ["1.7", "master"]
String[] supportedPhpVersions = ["5.6", "7.0", "7.1"]
def clientConfig = [
    "php-http/guzzle6-adapter": ["phpVersion": supportedPhpVersions, "psrImplem": ["guzzlehttp/psr7"]],
    "php-http/guzzle5-adapter": ["phpVersion": supportedPhpVersions, "psrImplem": ["guzzlehttp/psr7", "zendframework/zend-diactoros", "slim/slim"]],
    "php-http/curl-client": ["phpVersion": supportedPhpVersions, "psrImplem": ["guzzlehttp/psr7", "zendframework/zend-diactoros", "slim/slim"]]
]

imageRepo = "eu.gcr.io/akeneo-ci/php-api-client"
imageTag = "pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}"
gcrImages = []


def clients = clientConfig.keySet() as String[]
def buildResult= 'SUCCESS'

try {
    stage("Build") {
        milestone 1
        if (env.BRANCH_NAME =~ /^PR-/) {
            userInput = input(message: 'Launch tests?', parameters: [
                string(defaultValue: pimVersions.join(','), description: 'PIM edition the tests should run on', name: 'requiredPimVersions'),
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run integration tests', name: 'launchIntegrationTests'),
                string(defaultValue: clients.join(','), description: 'Clients used to run integration tests (comma separated values)', name: 'clients'),
            ])

            pimVersions = userInput['requiredPimVersions'].tokenize(',')
            launchUnitTests = userInput['launchUnitTests']
            launchIntegrationTests = userInput['launchIntegrationTests']
            clients = userInput['clients'].tokenize(',')
        }
        milestone 2

        checkouts = [:]

        if (launchUnitTests.equals("yes")) {
            String currentClient = "php-http/guzzle6-adapter"
            String currentPsrImplem = "guzzlehttp/psr7"

            for (phpVersion in clientConfig.get(currentClient).get("phpVersion")) {
                String currentPhpVersion = phpVersion

                checkouts["${currentClient}-${currentPsrImplem}-${currentPhpVersion}"] = {buildClient(currentPhpVersion, currentClient, currentPsrImplem)}
            }
        }

        if (launchIntegrationTests.equals("yes")) {
            for (pimVersion in pimVersions) {
                String currentPimVersion = pimVersion

                switch (currentPimVersion) {
                    case "1.7":
                        checkouts["pim_community_dev_${currentPimVersion}"] = {buildPim17(currentPimVersion)}
                        break
                    case "master":
                        checkouts["pim_community_dev_${currentPimVersion}"] = {buildPim20(currentPimVersion)}
                        break
                    default:
                        error("pimVersion \"${pimVersion}\" is not a valid version managed by this script..")
                        break
                }
            }

            for (client in clients) {
                for (phpVersion in clientConfig.get(client).get("phpVersion")) {
                    for (psrImplem in clientConfig.get(client).get("psrImplem")) {
                        String currentClient = client
                        String currentPhpVersion = phpVersion
                        String currentPsrImplem = psrImplem

                        checkouts["${currentClient}-${currentPsrImplem}-${currentPhpVersion}"] = {buildClient(currentPhpVersion, currentClient, currentPsrImplem)}
                    }
                }
            }
        }

        parallel checkouts
    }

    if (launchUnitTests.equals("yes")) {
        stage("Unit tests and Code style") {
            def tasks = [:]

            String currentClient = "php-http/guzzle6-adapter"
            String currentPsrImplem = "guzzlehttp/psr7"

            tasks["php-cs-fixer"] = {runPhpCsFixerTest("7.1", currentClient, currentPsrImplem)}

            for (phpVersion in clientConfig.get(currentClient).get("phpVersion")) {
                String currentPhpVersion = phpVersion

                tasks["phpspec-${phpVersion}"] = {runPhpSpecTest(currentPhpVersion, currentClient, currentPsrImplem)}
            }

            try {
                parallel tasks
            } catch (e) {
                println e
                buildResult = 'FAILURE'
            }
        }
    }

    if (launchIntegrationTests.equals("yes")) {
        for (pimVersion in pimVersions) {
            String currentPimVersion = pimVersion
            stage("Integration tests ${currentPimVersion}") {
                def tasks = [:]

                for (client in clients) {
                    for (phpVersion in clientConfig.get(client).get("phpVersion")) {
                        for (psrImplem in clientConfig.get(client).get("psrImplem")) {
                            String currentClient = client
                            String currentPsrImplem = psrImplem
                            String currentPhpVersion = phpVersion

                            tasks["phpunit-${currentClient}-${currentPsrImplem}-${currentPhpVersion}"] = {runIntegrationTest(currentPhpVersion, currentClient, currentPsrImplem, currentPimVersion)}
                        }
                    }
                }

                try {
                    parallel tasks
                } catch (e) {
                    println e
                    buildResult = 'FAILURE'
                }
            }
        }
    }
} catch (e) {
    println e
    buildResult = 'FAILURE'
} finally {
    stage("Cleanup") {
        if (gcrImages.size() > 0) {
            withDockerGcloudTemplate({
                sh "gcloud -q container images delete " + gcrImages.join(" ")
            })
        } else {
            echo "Nothing to cleanup"
        }
    }

    currentBuild.result = buildResult
}

/**
 * Run checkout of the PHP client, for a given PHP version, HTTP client and PSR7 implementation.
 * Run composer, prepare configuration files and push data to a docker registry image.
 *
 * @param phpVersion PHP version to use to run the composer
 * @param client     Name of the HTTP client package to use to checkout
 * @param psrImplem  Name of the PSR 7 implementation package to checkout
 */
void buildClient(String phpVersion, String client, String psrImplem) {
    withBuildNodeTemplate(phpVersion,{
        dir("php-api-client") {
            checkout scm

            container("php") {
                sh "composer --ansi require ${client} ${psrImplem}"
                sh "composer --ansi update --optimize-autoloader --no-interaction --no-progress --prefer-dist --no-suggest"
                sh "cp etc/parameters.yml.dist etc/parameters.yml"
                sh "sed -i \"s#baseUri: .*#baseUri: 'http://akeneo-pim'#g\" etc/parameters.yml"
                sh "sed -i \"s#install_path: .*#install_path: '/home/jenkins/pim'#g\" etc/parameters.yml"
            }

            String gcrImageName = getApiClientGCRImageName(phpVersion, client, psrImplem)
            saveDataToGCR("php", "/home/jenkins/php-api-client", gcrImageName)
        }
    })
}

/**
 * Run checkout of the PIM for a given PHP version and a PIM version.
 * Run composer, prepare configuration files, install PIM and push container data to docker registry images.
 *
 * @param pimVersion PIM version to checkout
 */
void buildPim17(String pimVersion) {
    withPim17Template({
        dir("php-api-client") {
            checkout scm

            container("php") {
                sh """sudo cp .ci/akeneo.conf /etc/apache2/sites-available/000-default.conf"""
            }
        }

        dir("pim") {
            checkout([$class: 'GitSCM',
                branches: [[name: pimVersion]],
                userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-community-dev.git']]
            ])

            container("php") {
                sh """composer --ansi require "akeneo/catalogs":"dev-master" --optimize-autoloader --no-interaction --no-progress --prefer-dist"""
                sh """cp app/config/parameters.yml.dist app/config/parameters.yml"""
                sh """sed -i "s#database_host: .*#database_host: 127.0.0.1#g" app/config/parameters.yml"""
                sh """sed -i "s#installer_data: .*#installer_data: '%kernel.root_dir%/../vendor/akeneo/catalogs/${pimVersion}/community/api/fixtures'#" app/config/pim_parameters.yml"""
                sh """chown -R docker:docker /home/jenkins/pim"""
                sh """sudo /usr/sbin/apache2ctl graceful"""
                sh """su docker -c './app/console pim:install -e prod'"""
            }
        }

        def backups = [:]
        backups["pim-${pimVersion}-php"]    = {saveDataToGCR("php", "/home/jenkins/pim", "${imageRepo}/pim-${pimVersion}-php:${imageTag}")}
        backups["pim-${pimVersion}-mysql"]  = {saveDataToGCR("mysql", "/var/lib/mysql", "${imageRepo}/pim-${pimVersion}-mysql:${imageTag}")}
        parallel backups
    })
}

/**
 * Run checkout of the PIM for a given PHP version and a PIM version.
 * Run composer, prepare configuration files, install PIM and push container data to docker registry images.
 *
 * @param pimVersion PIM version to checkout
 */
void buildPim20(String pimVersion) {
    withPim20Template({
        dir("php-api-client") {
            checkout scm

            container("httpd") {
                sh """cp .ci/akeneo.conf /usr/local/apache2/conf/vhost.conf"""
            }
        }

        dir("pim") {
            checkout([$class: 'GitSCM',
                branches: [[name: pimVersion]],
                userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-community-dev.git']]
            ])

            container("php") {
                sh """composer --ansi require "akeneo/catalogs":"dev-master" --optimize-autoloader --no-interaction --no-progress --prefer-dist"""
                sh """cp app/config/parameters.yml.dist app/config/parameters.yml"""
                sh """sed -i "s#database_host: .*#database_host: 127.0.0.1#g" app/config/parameters.yml"""
                sh """sed -i "s#index_hosts: .*#index_hosts: 'elastic:changeme@127.0.0.1:9200'#g" app/config/parameters.yml"""
                sh """sed -i "s#installer_data: .*#installer_data: '%kernel.root_dir%/../vendor/akeneo/catalogs/${pimVersion}/community/api/fixtures'#" app/config/pim_parameters.yml"""
                sh """bin/console pim:install -e prod"""
                sh """chown -R www-data:www-data /home/jenkins/pim/"""
            }
        }

        def backups = [:]
        backups["pim-${pimVersion}-php"]    = {saveDataToGCR("php", "/home/jenkins/pim", "${imageRepo}/pim-${pimVersion}-php:${imageTag}")}
        backups["pim-${pimVersion}-httpd"]  = {saveDataToGCR("httpd", "/usr/local/apache2/conf", "${imageRepo}/pim-${pimVersion}-httpd:${imageTag}")}
        backups["pim-${pimVersion}-mysql"]  = {saveDataToGCR("mysql", "/var/lib/mysql", "${imageRepo}/pim-${pimVersion}-mysql:${imageTag}")}
        backups["pim-${pimVersion}-elasticsearch"]  = {saveDataToGCR("elasticsearch", "/usr/share/elasticsearch/data", "${imageRepo}/pim-${pimVersion}-elasticsearch:${imageTag}")}
        parallel backups
    })
}

/**
 * Run php cs fixer, for a given PHP version, HTTP client and PSR7 implementation.
 *
 * @param phpVersion PHP version to run the test with
 * @param client     Name of the HTTP client package to run the test with
 * @param psrImplem  Name of the PSR 7 implementation package to run the test with
 */
void runPhpCsFixerTest(String phpVersion, String client, String psrImplem) {
    String phpApiImage = getApiClientGCRImageName(phpVersion, client, psrImplem)

    withPhpApiTemplate(phpApiImage, phpVersion, {
        dir("/home/jenkins/php-api-client") {
            try {
                sh "./bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > junit_output.xml"
            } finally {
                sh """sed -i 's/testcase name="/testcase name="[php-cs-fixer] /' junit_output.xml"""
                junit "junit_output.xml"
            }
        }
    })
}

/**
 * Run PHPspec tests, for a given PHP version, HTTP client and PSR7 implementation.
 *
 * @param phpVersion PHP version to run the test with
 * @param client     Name of the HTTP client package to use to run the test with
 * @param psrImplem  Name of the PSR 7 implementation package to run the test with
 */
void runPhpSpecTest(String phpVersion, String client, String psrImplem) {
    String phpApiImage = getApiClientGCRImageName(phpVersion, client, psrImplem)

    withPhpApiTemplate(phpApiImage, phpVersion, {
        dir("/home/jenkins/php-api-client") {
            try {
                sh "./bin/phpspec run --no-interaction --format=junit > junit_output.xml"
            } finally {
                sh """sed -i 's/testcase name="/testcase name="[php-${phpVersion}] /' junit_output.xml"""
                junit "junit_output.xml"
            }
        }
    })
}

/**
 * Run integration tests of the PHP client, for a given PHP version, HTTP client, PSR7 implementation and a PIM version.
 * First, it starts the PIM. The configuration of the PIM (composer, parameters) is already done in the checkout step.
 * Then, it launches the PHPUnit tests.
 *
 * Do note that PHPUnit resets the PIM database between each test and generates the API client id/secret,
 * thanks to "docker exec" commands inside the PHPUnit process.
 * In order to do that, the docker socket and docker bin are exposed as volumes to the PHPUnit container.
 *
 * @param phpVersion PHP version to run the test with
 * @param client     Name of the HTTP client package to use to run the test with
 * @param psrImplem  Name of the PSR 7 implementation package to run the test with
 * @param pimVersion PIM version to run the test with
 */
void runIntegrationTest(String phpVersion, String client, String psrImplem, String pimVersion) {
    switch (pimVersion) {
        case "1.7":
            runPim17IntegrationTest(phpVersion, client, psrImplem)
            break
        case "master":
            runPim20IntegrationTest(phpVersion, client, psrImplem)
            break
        default:
            error("pimVersion \"${pimVersion}\" is not a valid version managed by this script..")
            break
    }
}

/**
 * Run integration tests of the PHP client, for a given PHP version, HTTP client and PSR7 implementation on PIM version 1.7.
 *
 * 1) Ask to use Kubernetes PIM 1.7 pod template with specific data images (Depending on phpVersion, client, psrImplem)
 * 2) Scan all PHP test files in folder "tests/v1_7/Api" and "tests/Common/Api"
 * 3) For each php file, K8s create a PIM 1.7 pod and run commands inside defined container (Install PIM and launch tests)
 *
 * Do note that PHPUnit resets the PIM database between each test and generates the API client id/secret,
 * thanks to "docker exec" commands inside the PHPUnit process.
 * In order to do that, K8s pod template (pim_20_ce.yaml) need to mount docker socket and docker bin from host to "php-api-container".
 * Because K8s will create numbers of PIMs in parallel, there won't be one "pim" containers name as in Docker.
 * So we have to call Kubernetes API to get our current "php" container ID and put it in the the "docker_name" of parameters.yml
 *
 * @param phpVersion PHP version to run the test with
 * @param client     Name of the HTTP client package to use to run the test with
 * @param psrImplem  Name of the PSR 7 implementation package to run the test with
 */
def runPim17IntegrationTest(String phpVersion, String client, String psrImplem) {
    String pimVersion       = "1.7"
    String phpApiImageName  = getApiClientGCRImageName(phpVersion, client, psrImplem)
    String pimImageName     = getPimGCRImageName(pimVersion)

    queue(pimVersion, phpVersion, client, psrImplem, {
        def messages = new net.sf.json.JSONArray()
        def files = []

        // Find and store PHP test integration files to launch them in parallels
        files += sh (returnStdout: true, script: 'find /home/jenkins/php-api-client/tests/v1_7/Api -name "*Integration.php"').tokenize('\n')
        files += sh (returnStdout: true, script: 'find /home/jenkins/php-api-client/tests/Common/Api -name "*Integration.php"').tokenize('\n')

        for (file in files) {
            messages.add([
                // Export "php" container id into shared file (We use ''' has we don't want groovy interpolation for $)
                // And clean kubernetes' docker prefix "docker://<container-id>" (Take care, pubsub uses Busybox's sed != GNU sed)
                [container: "pubsub", script: '''sh -c "kubectl get pod \\${POD_NAME} -o jsonpath='{$.status.containerStatuses[?(@.name==\\"php\\")].containerID}' | sed 's#docker://##g' > /tmp/pod/php-container-id" '''],
                // Set "php" container id to parameters.yml
                [container: "php-api", script: '''sh -c 'sed -i "s#docker_name: .*#docker_name: $(cat /tmp/pod/php-container-id)#g" etc/parameters.yml' '''],
                [
                    container: "php-api",
                    junit: [in: "/home/jenkins/php-api-client/", name: "junit_output.xml"],
                    script: 'sudo php -d error_reporting="E_ALL" ./bin/phpunit -c phpunit.xml.dist '+file+' --log-junit junit_output.xml'
                ]
            ])
        }
        return messages
    })
}

/**
 * Run integration tests of the PHP client, for a given PHP version, HTTP client and PSR7 implementation on PIM version 2.0.
 *
 * 1) Ask to use Kubernetes PIM 2.0 pod template with specific data images (Depending on phpVersion, client, psrImplem)
 * 2) Scan all PHP test files in folder "tests/v2_0/Api" and "tests/Common/Api"
 * 3) For each php file, K8s create a PIM 2.0 pod and run commands inside defined container (Install PIM and launch tests)
 *
 * Do note that PHPUnit resets the PIM database between each test and generates the API client id/secret,
 * thanks to "docker exec" commands inside the PHPUnit process.
 * In order to do that, K8s pod template (pim_20_ce.yaml) need to mount docker socket and docker bin from host to "php-api-container".
 * Because K8s will create numbers of PIMs in parallel, there won't be one "pim" containers name as in Docker.
 * So we have to call Kubernetes API to get our current "php" container ID and put it in the the "docker_name" of parameters.yml
 *
 * @param phpVersion PHP version to run the test with
 * @param client     Name of the HTTP client package to use to run the test with
 * @param psrImplem  Name of the PSR 7 implementation package to run the test with
 */
def runPim20IntegrationTest(String phpVersion, String client, String psrImplem) {
    String pimVersion       = "master"
    String phpApiImageName  = getApiClientGCRImageName(phpVersion, client, psrImplem)
    String pimImageName     = getPimGCRImageName(pimVersion)

    queue(pimVersion, phpVersion, client, psrImplem, {
        def messages = new net.sf.json.JSONArray()
        def files = []

        // Find and store PHP test integration files to launch them in parallels
        files += sh (returnStdout: true, script: 'find /home/jenkins/php-api-client/tests/v2_0/Api -name "*Integration.php"').tokenize('\n')
        files += sh (returnStdout: true, script: 'find /home/jenkins/php-api-client/tests/Common/Api -name "*Integration.php"').tokenize('\n')

        for (file in files) {
            messages.add([
                // Export "php" container id into shared file (We use ''' has we don't want groovy interpolation for $)
                // And clean kubernetes' docker prefix "docker://<container-id>" (Take care, pubsub uses Busybox's sed != GNU sed)
                [container: "pubsub", script: '''sh -c "kubectl get pod \\${POD_NAME} -o jsonpath='{$.status.containerStatuses[?(@.name==\\"php\\")].containerID}' | sed 's#docker://##g' > /tmp/pod/php-container-id" '''],
                // Set "php" container id to parameters.yml
                [container: "php-api", script: '''sh -c 'sed -i "s#docker_name: .*#docker_name: $(cat /tmp/pod/php-container-id)#g" etc/parameters.yml' '''],
                // Change php-api-client conf for Pim 2.x
                [container: "php-api", script: '''sed -i 's#bin_path: .*#bin_path: bin#g' etc/parameters.yml'''],
                [container: "php-api", script: '''sed -i 's#version: .*#version: #g' etc/parameters.yml'''],
                [
                    container: "php-api",
                    junit: [in: "/home/jenkins/php-api-client/", name: "junit_output.xml"],
                    script: 'php -d error_reporting="E_ALL" ./bin/phpunit -c phpunit.xml.dist '+file+' --log-junit junit_output.xml'
                ]
            ])
        }
        return messages
    })
}

def withPim17Template(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()

    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        podTemplate(name: "php-api-client-node", label: "build-" + uuid, containers: [
            containerTemplate(
                name: "docker",
                image: "paulwoelfel/docker-gcloud",
                ttyEnabled: true,
                command: 'cat',
                envVars: [envVar(key: "DOCKER_API_VERSION", value: "1.23")],
                resourceRequestCpu: '100m',
                resourceRequestMemory: '200Mi'
            ),
            containerTemplate(
                name: "php",
                image: "akeneo/apache-php:php-5.6",
                ttyEnabled: true,
                alwaysPullImage: true,
                envVars: [
                    envVar(key: "COMPOSER_HOME", value: "/shared/.composer"),
                    envVar(key: "COMPOSER_AUTH", value: """{"github-oauth":{"github.com": "$token"}}""")],
                resourceRequestCpu: '500m',
                resourceRequestMemory: '750Mi'
            ),
            containerTemplate(
                name: "mysql",
                image: "eu.gcr.io/akeneo-ci/mysql:5.5",
                ttyEnabled: true,
                alwaysPullImage: true,
                envVars: [
                    envVar(key: "MYSQL_ROOT_PASSWORD",  value: "root"),
                    envVar(key: "MYSQL_USER",           value: "akeneo_pim"),
                    envVar(key: "MYSQL_PASSWORD",       value: "akeneo_pim"),
                    envVar(key: "MYSQL_DATABASE",       value: "akeneo_pim")],
                resourceRequestCpu: '100m',
                resourceRequestMemory: '700Mi'
            )
        ], volumes: [
            nfsVolume(mountPath: '/shared', serverAddress: "${env.NFS_IP}", serverPath: '/exports', readOnly: false),
            hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock"),
            emptyDirVolume(mountPath: '/data', memory: true)
        ]) {
            node("build-" + uuid) {
                dir('/home/jenkins') {
                    body()
                }
            }
        }
    }
}

def withPim20Template(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()

    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        podTemplate(name: "php-api-client-node", label: "build-" + uuid, containers: [
            containerTemplate(
                name: "docker",
                image: "paulwoelfel/docker-gcloud",
                ttyEnabled: true,
                command: 'cat',
                envVars: [envVar(key: "DOCKER_API_VERSION", value: "1.23")],
                resourceRequestCpu: '100m',
                resourceRequestMemory: '200Mi'
            ),
            containerTemplate(
                name: "php",
                image: "eu.gcr.io/akeneo-ci/php:7.1-fpm",
                ttyEnabled: true,
                alwaysPullImage: true,
                envVars: [
                    envVar(key: "COMPOSER_HOME", value: "/shared/.composer"),
                    envVar(key: "COMPOSER_AUTH", value: """{"github-oauth":{"github.com": "$token"}}""")],
                resourceRequestCpu: '500m',
                resourceRequestMemory: '1000Mi'
            ),
            containerTemplate(
                name: "httpd",
                image: "eu.gcr.io/akeneo-ci/httpd:2.4",
                ttyEnabled: true,
                alwaysPullImage: true,
                resourceRequestCpu: '100m',
                resourceRequestMemory: '200Mi'
            ),
            containerTemplate(
                name: "mysql",
                image: "eu.gcr.io/akeneo-ci/mysql:5.7",
                ttyEnabled: true,
                alwaysPullImage: true,
                envVars: [
                    envVar(key: "MYSQL_ROOT_PASSWORD",  value: "root"),
                    envVar(key: "MYSQL_USER",           value: "akeneo_pim"),
                    envVar(key: "MYSQL_PASSWORD",       value: "akeneo_pim"),
                    envVar(key: "MYSQL_DATABASE",       value: "akeneo_pim")],
                resourceRequestCpu: '100m',
                resourceRequestMemory: '700Mi'
            ),
            containerTemplate(
                name: "elasticsearch",
                image: "eu.gcr.io/akeneo-cloud/elasticsearch:v5.6.4-0",
                ttyEnabled: true,
                command: 'su',
                args: 'elasticsearch -c "cd /usr/share/elasticsearch && ./bin/es-docker"',
                alwaysPullImage: true,
                envVars: [
                    envVar(key: "ES_JAVA_OPTS", value: "-Xms1g -Xmx1g")],
                resourceRequestCpu: '100m',
                resourceRequestMemory: '1500Mi'
            )
        ], volumes: [
            nfsVolume(mountPath: '/shared', serverAddress: "${env.NFS_IP}", serverPath: '/exports', readOnly: false),
            hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock"),
            emptyDirVolume(mountPath: '/data', memory: true)
        ]) {
            node("build-" + uuid) {
                dir('/home/jenkins') {
                    body()
                }
            }
        }
    }
}

/**
 * This function allow you to run Google Cloud commands 
 * 
 * @param body              Groovy script to execute inside Jenkins node
 * 
 * Kubernetes Template :
 * (Default location is set to "/home/jenkins")
 *  - (Run)  docker         : Run Google Cloud commands inside
 *  - (Run)  php            : Run PHP commands inside
 */
def withBuildNodeTemplate(String phpVersion, body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()

    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        podTemplate(name: "php-api-client-node", label: "build-" + uuid, containers: [
            containerTemplate(
                name: "docker",
                image: "paulwoelfel/docker-gcloud",
                ttyEnabled: true,
                command: 'cat',
                envVars: [envVar(key: "DOCKER_API_VERSION", value: "1.23")],
                resourceRequestCpu: '100m', resourceRequestMemory: '200Mi'),
            containerTemplate(
                name: "php",
                image: "akeneo/php:${phpVersion}",
                ttyEnabled: true,
                command: 'cat',
                alwaysPullImage: true,
                envVars: [
                    envVar(key: "COMPOSER_HOME", value: "/shared/.composer"),
                    envVar(key: "COMPOSER_AUTH", value: """{"github-oauth":{"github.com": "$token"}}""")],
                resourceRequestCpu: '500m',
                resourceRequestMemory: '1000Mi')
        ], volumes: [
            nfsVolume(mountPath: '/shared', serverAddress: "${env.NFS_IP}", serverPath: '/exports', readOnly: false),
            hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock"),
            emptyDirVolume(mountPath: '/data', memory: true)
        ]) {
            node("build-" + uuid) {
                dir('/home/jenkins') {
                    body()
                }
            }
        }
    }
}

/**
 * This function allow you to run Google Cloud commands 
 * 
 * @param body              Groovy script to execute inside "docker" container
 * 
 * Kubernetes Template :
 *  - (Run)  docker         : Run Google Cloud commands inside
 */
def withDockerGcloudTemplate(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()

    podTemplate(name: "php-api-client-gcloud", label: "dockergcloud-" + uuid, containers: [
        containerTemplate(
            name: "docker",
            image: "paulwoelfel/docker-gcloud",
            ttyEnabled: true,
            command: 'cat',
            resourceRequestCpu: '100m',
            resourceRequestMemory: '200Mi',
            envVars: [envVar(key: "DOCKER_API_VERSION", value: "1.23")])
    ], volumes: [
        hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock")
    ]) {
        node("dockergcloud-" + uuid) {
            container("docker") {
                body()
            }
        }
    }
}

/**
 * This function allow you to run php commands with php-api-client sources 
 * 
 * @param phpApiImageName   Full GCR image name to pull, containing php-api-client data
 * @param phpVersion        PHP version to run the test with
 * @param body              Groovy script to execute inside "php" container
 * 
 * Kubernetes Template :
 *  - (Init) php-api-client : Copy php-api-client sources to /home/jenkins/php-api-client
 *  - (Run)  php            : Run PHP commands inside
 */
def withPhpApiTemplate(String phpApiImageName, String phpVersion, body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()

    podTemplate(name: "php-api-client-php", label: "php-" + uuid, containers: [
        containerTemplate(
            name: "php",
            image: "akeneo/php:${phpVersion}",
            ttyEnabled: true,
            command: 'cat',
            alwaysPullImage: true,
            resourceRequestCpu: '500m',
            resourceRequestMemory: '1000Mi')
    ], annotations: [
        podAnnotation(key: "pod.beta.kubernetes.io/init-containers", value:
        """
        [{
            "name":                 "php-api-client-data",
            "image":                "${phpApiImageName}",
            "command": ["sh", "-c", "mkdir -p /home/jenkins/php-api-client && tar -xf /data/data.tar.gz -C /home/jenkins/php-api-client"],
            "volumeMounts":[{
                "name":             "workspace-volume",
                "mountPath":        "/home/jenkins"
            }]
        }]
        """)
    ]) {
        node("php-" + uuid) {
            container("php") {
                body()
            }
        }
    }
}

/**
 * This function allow you to run a list of messages on parallel pods. 
 * Each message will create a kubernetes pod (based on template) and run its commands sequentially.
 * 
 * @param phpApiImageName   Full GCR image name to pull, containing php-api-client data
 * @param pimVersion        PIM version to run the test with
 * @param phpVersion        PHP version to run the test with
 * @param body              JSON Array containing the list of messages to execute in parallel
 * 
 * Kubernetes Template :
 *  - (Init) php-api-client : Copy php-api-client sources to /home/jenkins/php-api-client (Used for K8s PIM's template)
 *  - (Run)  gcloud         : Used to manage pubsub queues and to create PIM's Kubernetes pods (Based on template)
 */
def queue(String pimVersion, String phpVersion, String client, String psrImplem, body) {
    clearTemplateNames()
    String uuid = UUID.randomUUID().toString()
    // Maximum pods in parallel. Default set to number of messages
    def maxScale = 100
    String phpApiClientDataImage    = getApiClientGCRImageName(phpVersion, client, psrImplem)
    String pimDataImage             = "${imageRepo}/pim-${pimVersion}-php:${imageTag}"
    String httpdConfImage           = "${imageRepo}/pim-${pimVersion}-httpd:${imageTag}"
    String mysqlDataImage           = "${imageRepo}/pim-${pimVersion}-mysql:${imageTag}"
    String elasticSearchDataImage   = "${imageRepo}/pim-${pimVersion}-elasticsearch:${imageTag}"
    String k8sTemplate

    // Define Kubernetes pod template based on PIM version
    switch (pimVersion) {
        case "1.7":
            k8sTemplate = "pim_17_ce.yaml"
            break
        case "master":
            k8sTemplate = "pim_20_ce.yaml"
            break
        default:
            error("pimVersion \"${pimVersion}\" is not a valid version managed by this script..")
            break
    }

    podTemplate(name: "php-api-client-pubsub", label: "pubsub-" + uuid, containers: [
        containerTemplate(name: "gcloud", ttyEnabled: true, command: 'cat', image: "eu.gcr.io/akeneo-ci/gcloud:1.0.17", resourceRequestCpu: '100m', resourceRequestMemory: '200Mi', envVars: [envVar(key: "PUBSUB_PROJECT_ID", value: "akeneo-ci")])
    ], annotations: [
        podAnnotation(key: "pod.beta.kubernetes.io/init-containers", value:
        """
        [{
            "name":                 "php-api-client-data",
            "image":                "${phpApiClientDataImage}",
            "command": ["sh", "-c", "mkdir -p /home/jenkins/php-api-client && tar -xf /data/data.tar.gz -C /home/jenkins/php-api-client"],
            "volumeMounts":[{
                "name":             "workspace-volume",
                "mountPath":        "/home/jenkins"
            }]
        }]
        """)
    ], volumes: [
        hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock"),
        hostPathVolume(hostPath: "/usr/bin/docker", mountPath: "/usr/bin/docker")
    ]) {
        node("pubsub-" + uuid) {
            def messages = body()

            container("gcloud") {
                def pubsubPrefix = "php-api-client-${env.NODE_NAME}"
                sh "gcloud.phar pubsub:topic:create ${pubsubPrefix}"
                sh "gcloud.phar pubsub:topic:create ${pubsubPrefix}-results"
                sh "gcloud.phar pubsub:subscription:create ${pubsubPrefix} ${pubsubPrefix}-subscription"
                sh "gcloud.phar pubsub:subscription:create ${pubsubPrefix}-results ${pubsubPrefix}-results-subscription"

                def size = messages.size()
                def scale = size > maxScale ? maxScale : size

                writeJSON file: 'output.json', json: messages
                sh "gcloud.phar pubsub:message:publish ${pubsubPrefix} output.json"

                sh """sed -i \
                -e 's#JOB_SCALE#${scale}#g' \
                -e 's#JOB_NAME#${pubsubPrefix}#g' \
                -e 's#JOB_COMPLETIONS#${size}#g' \
                -e 's#SUBSCRIPTION_NAME#${pubsubPrefix}-subscription#g' \
                -e 's#RESULT_TOPIC#${pubsubPrefix}-results#g' \
                -e 's#PHP_API_CLIENT_DATA_IMAGE#${phpApiClientDataImage}#g' \
                -e 's#PIM_DATA_IMAGE#${pimDataImage}#g' \
                -e 's#MYSQL_DATA_IMAGE#${mysqlDataImage}#g' \
                -e 's#PHP_API_VERSION#${phpVersion}#g' \
                /home/jenkins/php-api-client/.ci/k8s/${k8sTemplate}
                """

                if ("master" == pimVersion) {
                    sh """sed -i \
                    -e 's#HTTPD_CONF_IMAGE#${httpdConfImage}#g' \
                    -e 's#ELASTICSEARCH_DATA_IMAGE#${elasticSearchDataImage}#g' \
                    /home/jenkins/php-api-client/.ci/k8s/${k8sTemplate}
                    """
                }

                try {
                    sh "cat /home/jenkins/php-api-client/.ci/k8s/${k8sTemplate}"
                    sh "kubectl apply -f /home/jenkins/php-api-client/.ci/k8s/${k8sTemplate}"
                    sh "gcloud.phar job:wait ${pubsubPrefix}-results-subscription ${size} ${env.WORKSPACE} --ansi"
                } finally {
                    sh "kubectl delete job ${pubsubPrefix} --namespace=jenkins-prod"
                    sh "gcloud.phar pubsub:topic:delete ${pubsubPrefix}"
                    sh "gcloud.phar pubsub:topic:delete ${pubsubPrefix}-results"
                    sh "gcloud.phar pubsub:subscription:delete ${pubsubPrefix}-subscription"
                    sh "gcloud.phar pubsub:subscription:delete ${pubsubPrefix}-results-subscription"

                    junit allowEmptyResults: true, testResults: 'junit/**/*.xml'
                }
            }
        }
    }
}

@NonCPS
def clearTemplateNames() {
    // see https://issues.jenkins-ci.org/browse/JENKINS-42184
    def action = currentBuild.rawBuild.getAction(PodTemplateAction.class);
    if(action) { action.names.clear() }
}

/**
 * Save current folder content inside a Docker image and push it to Google Cloud Registry
 *
 * @param gcrName               PHP version to run the test with
 * @param gCloudcontainerName   Container name allowed to build and push images to Google Cloud Registry
 */
def saveDataToGCR(String containerName, String pathToSave, String gcrImageName) {
    String flatPath = pathToSave.replaceAll("/", "-")
    String imageName = "${containerName}-${flatPath}"
    gcrImageName = gcrImageName ?: "${imageRepo}/${imageName}:${imageTag}"

    dir("/data/${containerName}/${flatPath}") {
        container(containerName) {
            try {
                sh "tar -zcvf data.tar.gz -C ${pathToSave} --warning=no-file-changed --warning=no-file-removed ."
            } catch (Exception e) {
                println e
            }
        }

        container("docker"){
            sh "echo 'FROM alpine:3.6\nCOPY data.tar.gz /data/data.tar.gz\n' > Dockerfile"
            sh "docker build -t ${gcrImageName} ."
            sh "gcloud docker -- push ${gcrImageName}"
            gcrImages += "${gcrImageName}"
        }
    }
}

/**
 * Give a structured name to tag current php-api-client data into Google Cloud Registry
 *
 * @param phpVersion PHP version to run the test with
 * @param client     name of the HTTP client package to use to run the test with
 * @param psrImplem  name of the PSR 7 implementation package to run the test with
 */
def getApiClientGCRImageName(String phpVersion, String client, String psrImplem) {
    String imageName = "${client}_${psrImplem}_php-${phpVersion}".replaceAll("/", "_")
    return "${imageRepo}/${imageName}:${imageTag}"
}

/**
 * Give a structured name to tag current pim data into Google Cloud Registry
 *
 * @param pimVersion PIM version to run the test with
 */
def getPimGCRImageName(String pimVersion) {
    String imageName = "pim_community_dev_${pimVersion}".replaceAll("/", "_")
    return "${imageRepo}/${imageName}:${imageTag}"
}
